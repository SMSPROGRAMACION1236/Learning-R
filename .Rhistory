Sys.which("make")
ls
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
plot(1:10, 1:10)
plot(1:44, 24:92)
plot(1:1, 35:1)
plot(4:2)
plot(4:34)
plot(1:!)
plot(1:1)
plot(1:2)
plot(99:99)
hola c("HolA")
HOL<- LL
HOL<- LL
HOL <- LL
hola <- yy
hola <- yy
234 <- 23
ppe <- 23
ppe
hh
plot(density(zinc), col = "blue")
plot(density(zinc), col = "blue")
plot(density(zinc), col = "blue")
plot(density(zinc), col = "blue")
zinc <- c(3, 5.8, 5.6, 4.8, 5.1, 3.6, 5.5, 4.7, 5.7, 5, 5.9, 5.7, 4.4, 5.4, 4.2, 5.3, NA)
plot(density(zinc), col = "blue")
plot(density(zinc), col = "blue")
is.character(mixto)
d <- c(7.1)
# Vectores
mi_vector <- c(1, 8, 5, 10)
mi_vector
class(mi_vector)
mi_vector2 <- 4: 155
length(mi_vector2)
mi_vector3 <- vector(mode = "numeric", length = 14)
mi_vector4 <- vector(mode = "logical", length = 14)
mi_vector4
hola <- c("Hola", "Como", "Estamos")
hola
# R no permite mezclar tipos de datos diferentes en vectores
mixto <- c(1, "perro", 4, 7, 2) # En este caso se cambia los numeros a string segun R
mixto
d <- c(7.1)
is.vector(d)  #Estructura de datos
is.numeric(d)  # Tipo de datos
is.character(d)
is.character(mixto)
h <- c(4, 7, 3, NA, 65, 2)  # NA = Sin valor
is.na(h)  # Para saber si un elemento esta vacio
mean(c(4, 8))  #Calcular el promedio
zinc <- c(3, 5.8, 5.6, 4.8, 5.1, 3.6, 5.5, 4.7, 5.7, 5, 5.9, 5.7, 4.4, 5.4, 4.2, 5.3, NA)
length(zinc)
zinc <- zinc[!is.na(zinc)]  # Para no hacer na.rm = TRUE
mean(zinc, na.rm = TRUE)  # PAra eliminar el NA
sd(zinc, na.rm = TRUE)  # Desviacion estandar, que tanto varia los datos en cuanto a la media o promedio
median(zinc, na.rm = TRUE) # Calcular la median
sort(zinc)
summary(zinc) # Datos y analisis
boxplot(zinc)  #Graficos
zin
c <- 234, col= "blue"
c <- 234, col= "blue"
c <- 24, col= "blue"
c <- 24
col= "blue"
c <- 24
col= "blue"
c
seq(-2, 4, length = 10)
setwd("C:/Users/santi/ProgramaciÃ³n/Hello R")
x <- 10:1
y <- -4:5
x <- 10:1
x <- 10:1
y <- -4:5
q <- c("Hockey",
"Football",
"Baseball",
"Curling",
"Rugby",
"Lacrose",
"Baskeetball",
"Tennis",
"Cricket",
"Soccer")
q <- c("Hockey",
"Football",
"Baseball",
"Curling",
"Rugby",
"Lacrose",
"Baskeetball",
"Tennis",
"Cricket",
"Soccer")
ength(x)
length(x)
length(y)
length(q)
mi_tabla <- data.frame(x, y, q)
mi_tabla
View(mi_tabla)
View(mi_tabla)
mi_tabla <-  data.frame(columna1 = x, columna2 = y, deportes = q)
mi_tabla <- data.frame(x, y, q)
mi_tabla
mi_tabla
class(mi_tabla)
View(mi_tabla)
mi_tabla <-  data.frame(columna1 = x, columna2 = y, deportes = q) # Cambiar los numeros
mi_tabla
mi_tabla[1:5,]  # Izquierda renglones y derecha columnas
mtcarts
mtcars
help(mtcars)
mtcars[1:10;]
mtcars[1:10,]
mtcars[, 5:7]
colnames(mtcars)
colnames(mi_tabla) # Para saber el nombre de las columnas
mtcars(mtcars $ cy1 == 8,)
mtcars(mtcars$cyl == 8,)
mtcars(mtcars$cy1 == 8,)
View(mtcars)
mtcars(mtcars$cy1 == 8,)
mtcars(mtcars$cy1 == 8,)
mtcars(mtcars$cy1 == 8,)
mtcars[mtcars$cy1 == 8,]
mtcars[mtcars$cyl == 8,] # Filtrar de una propiedad en este caso los vehiculos con 8 cilindros
[mtcars$cyl == 8,
mtcars$cyl == 8
mtcars[mtcars$hp > 200, ]
mtcars[mtcars$hp > 200,1:3 ]
mtcars[mtcars$hp > 200,1:2 ]
mtcars[mtcars$hp > 200,1 ]
nrow(mtcars[mtcars$hp > 200, ] / nrow(mtcars)) * 100
(nrow(mtcars[mtcars$hp > 200, ] / nrow(mtcars)) * 100
(nrow(mtcars[mtcars$hp > 200, ] / nrow(mtcars)) * 100
mtcars
mtcars$cyl
mtcars[mtcars$hp > 200,] # En este caso los caballos de fuerza
(nrow(mtcars[mtcars$hp > 200, ] / nrow(mtcars)) * 100
ncol(mtcars) # Numero de columnas
ncol(mtcars) # Numero de columnas
dim(mtcars)
mtcars[1,1 ]
mtcars[1,1
mtcars[1,1]
mtcars[1,1]
mtcars[, c(1, 5)]
mtcars[c(2,7, 23),]
mtcars
mtcars [,c("mpg", "cyl"),]
mtcars [,c("mpg", "cyl")]
mtcars
library(tibble)
mtcars2 = tibble::rownames_to_column(mtcars, "Model") # Dar nombre a una columna sin nombre previamente
View(mtcars2)
mtcars2 = tibble::rownames_to_column(mtcars, "Model") # Dar nombre a una columna sin nombre previamente
mtcars2
mtcars
mtcars2[Model = "Datson 718",]
mtcars2[mtcars2$Model = "Datson 718",]
mtcars2[mtcars2$Model = "Datson 718",]
mtcars2[mtcars2$Model = "Datson 710",]
mtcars2[mtcars2$Model = "Datson 710", ]
mtcars2[mtcars2$Model = "Datson 710", ]
mtcars2[mtcars2$Model = "Datson 710", ]
mtcars2[mtcars2$Model = "Datson 710", ]
mtcars2[mtcars2$Model = "Datson 710", ]
mtcars2[mtcars2$Model = "Datson 710", ]
mtcars2[mtcars2$Model == "Datson 710", ]
View(mtcars2)
"Hola Mundo"
x <- 10
x <- 10
x <- 10
if(x ==10){
print(" Si es verdadera")
}else{
print("No es verdadera")
}
ifelse()
x <- 10
if(x ==10){
print(" Si es verdadera")
}else{
print("No es verdadera")
}
if(x ==345){
print(" Si es verdadera")
}else{
print("No es verdadera")
}
nombre<- "Jonni"
if (nombre == "jonni") {
print("Hola Jonni")
}else {
print("Donde esta Jonni")
}
nombre == "jonni"
print("No es numero")}
x <- 6
if (is.numeric(x)) {
print("Esto es un numero")
}else{
print("No es numero")}
x <- TRUE
if (is.numeric(x)) {
print("Esto es un numero")
}else{
print("No es numero")}
if (is.numeric(x)) {  # ! para poner en falso o lo contrario
print("Esto es un numero")
}else{
print("No es numero")}
!TRUE
!TRUE
!FALSE
y <- "Jonni"
if (is.character(y)) {
print(" Es una cadena")
}else{
print("No es cadena")
}
if (!is.character(y)) {
print(" Es una cadena")
}else{
print("No es cadena")
}
if (is.character(y)) {
print(" Es una cadena")
}else{
print("No es cadena")
}
# El primero es la condicion el segundo sera la primera condiccion seria el if y el tercero seria si no se cumple la condicion anterior
ifelse (nombre == "Jonni", "Hi Jonni", "Dond esta Jonni")
source("~/.active-rstudio-document", echo=TRUE)
(tidyverse)
(tidyverse)
install.packages("tidyverse")
install.packages("magrittr")
library(tidyverse)
library(magrittr)
transform(wt = ifelse(wt > 3, "Auto Pesado", "Auto ligero") %>%
x <- 6
View
mtcars %>%
View()
